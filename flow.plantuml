@startuml
actor User

title A user browses to the dispatch URL and spawns a new server.

User -> SSS: Browse to Dispatch URL
activate SSS
note right SSS: GET: /api/dispatch?cloneurl=X&branch=Y
SSS -> Workspace: Store
activate Workspace
Workspace --> SSS
SSS -> Spawner
activate Spawner
SSS --> User: Redirect to dashboard url
deactivate SSS

User -> Dashboard
note right Dashboard: GET: dashboard-url/#?server=:server
activate Dashboard
Dashboard -> SSS: Check state of server
note right SSS: GET: /api/server/:server/state
activate SSS
SSS -> Workspace
Workspace --> SSS
SSS --> Dashboard: state
deactivate SSS

... continue to check state of server and provide feedback to User ...

Spawner -> Workspace: Clone repo and checkout branch
Spawner -> Matcher1: isMatching
activate Matcher1
Matcher1 -> Workspace
Workspace --> Matcher1
Matcher1 --> Spawner: No
deactivate Matcher1

... continue to check configured matchers ...

Spawner -> MatcherX: isMatching
activate MatcherX
MatcherX -> Workspace
Workspace --> MatcherX
MatcherX --> Spawner: Yes
deactivate MatcherX

Spawner -> MatcherX: Determine name
activate MatcherX
MatcherX -> Workspace
Workspace --> MatcherX
MatcherX --> Spawner
deactivate MatcherX

Spawner -> MatcherX: Invoke prepare command
activate MatcherX
MatcherX -> Workspace
Workspace --> MatcherX
MatcherX -> Spawner
deactivate MatcherX

Spawner -> MatcherX: Invoke pre-start code
activate MatcherX
MatcherX -> Workspace
Workspace --> MatcherX
MatcherX -> Spawner
deactivate MatcherX

Spawner -> MatcherX: Get start command
activate MatcherX
MatcherX -> Workspace
Workspace --> MatcherX
MatcherX --> Spawner
deactivate MatcherX

Spawner -> Server: Start server
activate Server
Spawner -> Workspace: Set server state as "run"

Dashboard --> User: Redirect to Server
deactivate Dashboard
User -> Server
note left Server: GET: server-url

... wait configured time to live ...

Spawner -> Server: Close
deactivate Server
Spawner -> Workspace: Cleanup
deactivate Workspace
Spawner -> Spawner: Close
deactivate Spawner
@enduml



